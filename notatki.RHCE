* NSA recommendations:
  - less software == the better
  - central firewall + local firewalls
  - policy DROP for all chains
* /proc/sys/net/ipv4/ip_forward == /proc/sys/net/ipv4/ip_forward
* xinetd:
  - access restrictions: only_from, no_access
* tcp wrappers:
  - check whether libwrap library is linked to the binary
  - /etc/hosts.{allow,deny} - allow has higher priority, default means allow
  - man hosts_access
  - example syntax:
    ALL: .vespian.net EXCEPT 1.2.3.4
    sshd: 12.4.2.0/255.255.255.0
    ALL EXCEPT sshd: 10.0.0.1
    ALL: ALL
  - the name of the binary matters, even if running through xinetd
* rpmconfig - tool to merge all the *.rpmsave files
* iptables can translate domain names!
  iptables -A INPUT -s youtube.com -j REJECT
  -A INPUT -s 173.194.112.167/32 -j REJECT --reject-with icmp-port-unreachable
  -A INPUT -s 173.194.112.161/32 -j REJECT --reject-with icmp-port-unreachable
  etc...
* pam has excellent HTML doc -> /usr/share/doc/pam-*/html/
* pam_listfile can be used to limit per-user access. Check vsftpd pam access
  module
* SHA-1 is being phased out, SHA-2 includes four hash functions with message
  digests of up to 512 bits (SHA-512)
* man -k != apropos. apropos is case-sensitive
* while defining file context, remamber to use wildcards !
  semanage fcontext -a -t httpd_sys_content_t "/web(/.*)?"
* ssh-copy-id -> tool to automatically propagate user identities (ssh-keys,
  .ssh directories, etc...)
* how RSA works:
    Choose two distinct prime numbers, such as
        p = 61 and q = 53
    Compute n = pq giving
        n = 61 * 53 = 3233
    Compute the totient of the product as φ(n) = (p − 1)(q − 1) giving
        φ(3233) = (61 - 1)(53 - 1) = 3120
    Choose any number 1 < e < 3120 that is coprime to 3120. Choosing a prime
    number for e leaves us only to check that e is not a divisor of 3120.
        Let e = 17
    Compute d, the modular multiplicative inverse of e (mod φ(n)) yielding
        d = 2753
    The public key is (n = 3233, e = 17). For a padded plaintext message m,
    the encryption function is
        c(m) = m^17 mod(3233)
    The private key is (n = 3233, d = 2753). For an encrypted ciphertext c,
    the decryption function is
        m(c) = c^2753 mod(3233)
    For instance, in order to encrypt m = 65, we calculate
        c = 65^17 mod(3233) = 2790
    To decrypt c = 2790, we calculate
        m = 2790^2753 mod(3233) = 65
* how SSH session is established


